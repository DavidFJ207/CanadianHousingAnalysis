ggplot(aes(x = SixMonthPeriod, y = construction)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "Number of New Built Homes")
#| label: fig-sold-homes
#| fig-cap: Sold Homes Over Time
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = absorption)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "Number of Sold Homes")
#| label: fig-gdp
#| fig-cap: Gross Domestic Product
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = gdp)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "GDP")
#| label: fig-interest-rate
#| fig-cap: Interest Rate Trends and Hikes
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = rate)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "Rate")
#| label: fig-cpi
#| fig-cap: CPI
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = cpi)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "CPI")
#### Preamble ####
# Purpose: Develop and validate a multiple linear regression model to predict house prices based on economic and housing indicators.
# Author: Gadiel David Flores Jimenez
# Date: 2024/11/25
# Contact: davidgadiel.flores@mail.utoronto.ca
# License: MIT
# Pre-requisites:
#   - The dataset `analysis_data.csv` must be available in the `data/02-analysis_data/` directory.
#   - Required libraries (`tidyverse`, `caret`, `car`) must be installed.
#   - The `here` package should be configured correctly to reference project files.
# Any other information needed:
#   - This script performs exploratory data analysis, model fitting, assumption diagnostics, and validation.
#   - Outputs include diagnostic plots, validation metrics, and a saved final model object (`final_model.rds`).
#### Workspace setup ####
library(tidyverse)
library(caret)
library(car)
### **Step 1: Data Preparation and Exploration** ###
# Read and prepare the data
analysis_data <- arrow::read_parquet(here::here("data", "02-analysis_data", "analysis_data.parquet"))
# Split data into training (80%) and testing (20%) datasets
set.seed(123)
train_index <- createDataPartition(analysis_data$house_price, p = 0.8, list = FALSE)
train_data <- analysis_data[train_index, ]
test_data <- analysis_data[-train_index, ]
# Explore correlations among predictors
correlation_matrix <- cor(train_data[, c("rate", "gdp", "cpi", "construction", "absorption")], use = "complete.obs")
cat("Correlation Matrix:\n")
print(correlation_matrix)
# Initial check for multicollinearity using VIF
initial_model <- lm(house_price ~ rate + gdp + construction + absorption, data = train_data)
initial_vif <- vif(initial_model)
cat("Initial VIF Values:\n")
print(initial_vif)
# Remove highly correlated predictors
model_without_gdp <- lm(house_price ~ rate + gdp + construction + absorption, data = train_data)
vif_without_gdp <- vif(model_without_gdp)
cat("VIF Values after removing gdp:\n")
print(vif_without_gdp)
### **Step 2: Model Fitting and Diagnostics** ###
# Fit the updated model and check assumptions
cat("Summary of the model without cpi:\n")
print(summary(model_without_gdp))
# Residual diagnostics
residuals <- residuals(model_without_gdp)
fitted_values <- fitted(model_without_gdp)
# Linearity: Residuals vs. Fitted Plot
plot(fitted_values, residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20,
col = "blue")
abline(h = 0, col = "red", lty = 2)
# Homoscedasticity: Scale-Location Plot
sqrt_abs_residuals <- sqrt(abs(residuals))
plot(fitted_values, sqrt_abs_residuals,
main = "Scale-Location Plot",
xlab = "Fitted Values",
ylab = "Square Root of Absolute Residuals",
pch = 20,
col = "blue")
abline(h = mean(sqrt_abs_residuals), col = "red", lty = 2)
# Normality: Q-Q Plot
qqnorm(residuals, main = "Normal Q-Q Plot")
qqline(residuals, col = "red", lty = 2)
# Summarize residual diagnostics
cat("Summary of residuals:\n")
print(summary(residuals))
cat("\nStandard deviation of residuals:\n")
print(sd(residuals))
### **Step 3: Model Refinement and Validation** ###
# Simplify model by evaluating predictors' significance
final_model <- step(model_without_gdp, direction = "both", trace = FALSE)  # Stepwise AIC-based refinement
cat("Final Model Summary:\n")
print(summary(final_model))
# Validate model on test data
predictions <- predict(final_model, newdata = test_data)
test_residuals <- test_data$house_price - predictions
# Compute validation metrics
rmse <- sqrt(mean(test_residuals^2))
mae <- mean(abs(test_residuals))
r_squared <- 1 - (sum(test_residuals^2) / sum((test_data$house_price - mean(test_data$house_price))^2))
cat("Validation Metrics:\n")
cat("RMSE:", round(rmse, 2), "\n")
cat("MAE:", round(mae, 2), "\n")
cat("R-squared:", round(r_squared, 4), "\n")
#### Save final model ####
saveRDS(
final_model,
file = "models/final_model.rds"
)
#### Preamble ####
# Purpose: Develop and validate a multiple linear regression model to predict house prices based on economic and housing indicators.
# Author: Gadiel David Flores Jimenez
# Date: 2024/11/25
# Contact: davidgadiel.flores@mail.utoronto.ca
# License: MIT
# Pre-requisites:
#   - The dataset `analysis_data.csv` must be available in the `data/02-analysis_data/` directory.
#   - Required libraries (`tidyverse`, `caret`, `car`) must be installed.
#   - The `here` package should be configured correctly to reference project files.
# Any other information needed:
#   - This script performs exploratory data analysis, model fitting, assumption diagnostics, and validation.
#   - Outputs include diagnostic plots, validation metrics, and a saved final model object (`final_model.rds`).
#### Workspace setup ####
library(tidyverse)
library(caret)
library(car)
### **Step 1: Data Preparation and Exploration** ###
# Read and prepare the data
analysis_data <- arrow::read_parquet(here::here("data", "02-analysis_data", "analysis_data.parquet"))
# Split data into training (80%) and testing (20%) datasets
set.seed(123)
train_index <- createDataPartition(analysis_data$house_price, p = 0.8, list = FALSE)
train_data <- analysis_data[train_index, ]
test_data <- analysis_data[-train_index, ]
# Explore correlations among predictors
correlation_matrix <- cor(train_data[, c("rate", "gdp", "cpi", "construction", "absorption")], use = "complete.obs")
cat("Correlation Matrix:\n")
print(correlation_matrix)
# Initial check for multicollinearity using VIF
initial_model <- lm(house_price ~ rate + gdp + construction + absorption, data = train_data)
initial_vif <- vif(initial_model)
cat("Initial VIF Values:\n")
print(initial_vif)
# Remove highly correlated predictors
model_without_gdp <- lm(house_price ~ rate + gdp + construction + absorption, data = train_data)
vif_without_gdp <- vif(model_without_gdp)
cat("VIF Values after removing gdp:\n")
print(vif_without_gdp)
### **Step 2: Model Fitting and Diagnostics** ###
# Fit the updated model and check assumptions
cat("Summary of the model without cpi:\n")
print(summary(model_without_gdp))
# Residual diagnostics
residuals <- residuals(model_without_gdp)
fitted_values <- fitted(model_without_gdp)
# Linearity: Residuals vs. Fitted Plot
plot(fitted_values, residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20,
col = "blue")
abline(h = 0, col = "red", lty = 2)
# Homoscedasticity: Scale-Location Plot
sqrt_abs_residuals <- sqrt(abs(residuals))
plot(fitted_values, sqrt_abs_residuals,
main = "Scale-Location Plot",
xlab = "Fitted Values",
ylab = "Square Root of Absolute Residuals",
pch = 20,
col = "blue")
abline(h = mean(sqrt_abs_residuals), col = "red", lty = 2)
# Normality: Q-Q Plot
qqnorm(residuals, main = "Normal Q-Q Plot")
qqline(residuals, col = "red", lty = 2)
# Summarize residual diagnostics
cat("Summary of residuals:\n")
print(summary(residuals))
cat("\nStandard deviation of residuals:\n")
print(sd(residuals))
### **Step 3: Model Refinement and Validation** ###
# Simplify model by evaluating predictors' significance
final_model <- step(model_without_gdp, direction = "both", trace = FALSE)  # Stepwise AIC-based refinement
cat("Final Model Summary:\n")
print(summary(final_model))
# Validate model on test data
predictions <- predict(final_model, newdata = test_data)
test_residuals <- test_data$house_price - predictions
# Compute validation metrics
rmse <- sqrt(mean(test_residuals^2))
mae <- mean(abs(test_residuals))
r_squared <- 1 - (sum(test_residuals^2) / sum((test_data$house_price - mean(test_data$house_price))^2))
cat("Validation Metrics:\n")
cat("RMSE:", round(rmse, 2), "\n")
cat("MAE:", round(mae, 2), "\n")
cat("R-squared:", round(r_squared, 4), "\n")
#### Save final model ####
saveRDS(
final_model,
file = "models/final_model.rds"
)
#### Preamble ####
# Purpose: Develop and validate a multiple linear regression model to predict house prices based on economic and housing indicators.
# Author: Gadiel David Flores Jimenez
# Date: 2024/11/25
# Contact: davidgadiel.flores@mail.utoronto.ca
# License: MIT
# Pre-requisites:
#   - The dataset `analysis_data.csv` must be available in the `data/02-analysis_data/` directory.
#   - Required libraries (`tidyverse`, `caret`, `car`) must be installed.
#   - The `here` package should be configured correctly to reference project files.
# Any other information needed:
#   - This script performs exploratory data analysis, model fitting, assumption diagnostics, and validation.
#   - Outputs include diagnostic plots, validation metrics, and a saved final model object (`final_model.rds`).
#### Workspace setup ####
library(tidyverse)
library(caret)
library(car)
### **Step 1: Data Preparation and Exploration** ###
# Read and prepare the data
analysis_data <- arrow::read_parquet(here::here("data", "02-analysis_data", "analysis_data.parquet"))
# Split data into training (80%) and testing (20%) datasets
set.seed(123)
train_index <- createDataPartition(analysis_data$house_price, p = 0.8, list = FALSE)
train_data <- analysis_data[train_index, ]
test_data <- analysis_data[-train_index, ]
# Explore correlations among predictors
correlation_matrix <- cor(train_data[, c("rate", "gdp", "cpi", "construction", "absorption")], use = "complete.obs")
cat("Correlation Matrix:\n")
print(correlation_matrix)
# Initial check for multicollinearity using VIF
initial_model <- lm(house_price ~ rate + gdp + cpi + construction + absorption, data = train_data)
initial_vif <- vif(initial_model)
cat("Initial VIF Values:\n")
print(initial_vif)
# Remove highly correlated predictors
model_without_gdp <- lm(house_price ~ rate +cpi + construction + absorption, data = train_data)
vif_without_gdp <- vif(model_without_gdp)
cat("VIF Values after removing gdp:\n")
print(vif_without_gdp)
### **Step 2: Model Fitting and Diagnostics** ###
# Fit the updated model and check assumptions
cat("Summary of the model without cpi:\n")
print(summary(model_without_gdp))
# Residual diagnostics
residuals <- residuals(model_without_gdp)
fitted_values <- fitted(model_without_gdp)
# Linearity: Residuals vs. Fitted Plot
plot(fitted_values, residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20,
col = "blue")
abline(h = 0, col = "red", lty = 2)
# Homoscedasticity: Scale-Location Plot
sqrt_abs_residuals <- sqrt(abs(residuals))
plot(fitted_values, sqrt_abs_residuals,
main = "Scale-Location Plot",
xlab = "Fitted Values",
ylab = "Square Root of Absolute Residuals",
pch = 20,
col = "blue")
abline(h = mean(sqrt_abs_residuals), col = "red", lty = 2)
# Normality: Q-Q Plot
qqnorm(residuals, main = "Normal Q-Q Plot")
qqline(residuals, col = "red", lty = 2)
# Summarize residual diagnostics
cat("Summary of residuals:\n")
print(summary(residuals))
cat("\nStandard deviation of residuals:\n")
print(sd(residuals))
### **Step 3: Model Refinement and Validation** ###
# Simplify model by evaluating predictors' significance
final_model <- step(model_without_gdp, direction = "both", trace = FALSE)  # Stepwise AIC-based refinement
cat("Final Model Summary:\n")
print(summary(final_model))
# Validate model on test data
predictions <- predict(final_model, newdata = test_data)
test_residuals <- test_data$house_price - predictions
# Compute validation metrics
rmse <- sqrt(mean(test_residuals^2))
mae <- mean(abs(test_residuals))
r_squared <- 1 - (sum(test_residuals^2) / sum((test_data$house_price - mean(test_data$house_price))^2))
cat("Validation Metrics:\n")
cat("RMSE:", round(rmse, 2), "\n")
cat("MAE:", round(mae, 2), "\n")
cat("R-squared:", round(r_squared, 4), "\n")
#### Save final model ####
saveRDS(
final_model,
file = "models/final_model.rds"
)
# Remove highly correlated predictors
model_without_gdp <- lm(house_price ~ rate +cpi + construction + absorption, data = train_data)
vif_without_gdp <- vif(model_without_gdp)
cat("VIF Values after removing gdp:\n")
print(vif_without_gdp)
### **Step 2: Model Fitting and Diagnostics** ###
# Fit the updated model and check assumptions
cat("Summary of the model without cpi:\n")
print(summary(model_without_gdp))
# Remove highly correlated predictors
model_without_gdp <- lm(house_price ~ rate +cpi + construction + absorption, data = train_data)
vif_without_gdp <- vif(model_without_gdp)
cat("VIF Values after removing gdp:\n")
print(vif_without_gdp)
### **Step 2: Model Fitting and Diagnostics** ###
# Fit the updated model and check assumptions
cat("Summary of the model without cpi:\n")
print(summary(model_without_gdp))
final_model <- step(model_without_gdp, direction = "both", trace = FALSE)  # Stepwise AIC-based refinement
cat("Final Model Summary:\n")
print(summary(final_model))
#| label: tbl-modelresults
#| tbl-cap: Summary of NHPI Model Results
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Summarizing the results
results_table <- data.frame(
Factor = c("Bank Interest Rate", "CPI", "Housing Absorption"),
Effect_on_NHPI = c("0.99 per unit increase", "1.53 per unit increase", "0.003 per unit increase")
)
# Model performance
r_squared <- 0.9544
# Create the table with only a caption
kable(results_table, caption = "Summary of NHPI Model Results") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
#| label: tbl-modelresults
#| tbl-cap: Summary of NHPI Model Results
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Summarizing the results
results_table <- data.frame(
Factor = c("Bank Interest Rate", "CPI", "Housing Absorption"),
Effect_on_NHPI = c("0.99 per unit increase", "1.53 per unit increase", "-0.003 per unit increase")
)
# Model performance
r_squared <- 0.9544
# Create the table with only a caption
kable(results_table, caption = "Summary of NHPI Model Results") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
#| label: fig-sim-data
#| fig-cap: Simulated Data
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Load the model
final_model <- readRDS(here::here("models/final_model.rds"))
#### Compare the datasets ####
# Check the structure of both datasets
glimpse(analysis_data)
glimpse(sim_data)
# Summary statistics comparison
summary_stats <- list(
observed = analysis_data %>% summary(),
simulated = sim_data %>% summary()
)
# Visualization: NHPI vs Predictor Variables for both datasets
# Prepare observed data
observed_long <- analysis_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Observed")
# Prepare simulated data
simulated_long <- sim_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Simulated")
# Combine datasets
combined_data <- bind_rows(observed_long, simulated_long)
# Plot comparison
combined_data %>%
ggplot(aes(x = Value, y = house_price, color = Dataset)) +
geom_point(alpha = 0.5) +
facet_wrap(~Variable, scales = "free_x") +
theme_minimal() +
labs(title = "Comparison of Observed vs Simulated NHPI",
x = "Predictor Value",
y = "House Price",
color = "Dataset")
#### Model-based comparison ####
# Predict NHPI for both datasets using the model
observed_predictions <- analysis_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
simulated_predictions <- sim_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
#| label: fig-sim-data
#| fig-cap: Simulated Data
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Load the model
final_model <- readRDS(here::here("models/final_model.rds"))
#### Compare the datasets ####
# Check the structure of both datasets
glimpse(analysis_data)
glimpse(sim_data)
# Visualization: NHPI vs Predictor Variables for both datasets
# Prepare observed data
observed_long <- analysis_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Observed")
# Prepare simulated data
simulated_long <- sim_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Simulated")
# Combine datasets
combined_data <- bind_rows(observed_long, simulated_long)
# Plot comparison
combined_data %>%
ggplot(aes(x = Value, y = house_price, color = Dataset)) +
geom_point(alpha = 0.5) +
facet_wrap(~Variable, scales = "free_x") +
theme_minimal() +
labs(title = "Comparison of Observed vs Simulated NHPI",
x = "Predictor Value",
y = "House Price",
color = "Dataset")
#### Model-based comparison ####
# Predict NHPI for both datasets using the model
observed_predictions <- analysis_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
simulated_predictions <- sim_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
#| label: fig-sim-data
#| fig-cap: Simulated Data
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Load the model
final_model <- readRDS(here::here("models/final_model.rds"))
# Visualization: NHPI vs Predictor Variables for both datasets
# Prepare observed data
observed_long <- analysis_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Observed")
# Prepare simulated data
simulated_long <- sim_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Simulated")
# Combine datasets
combined_data <- bind_rows(observed_long, simulated_long)
# Plot comparison
combined_data %>%
ggplot(aes(x = Value, y = house_price, color = Dataset)) +
geom_point(alpha = 0.5) +
facet_wrap(~Variable, scales = "free_x") +
theme_minimal() +
labs(title = "Comparison of Observed vs Simulated NHPI",
x = "Predictor Value",
y = "House Price",
color = "Dataset")
#### Model-based comparison ####
# Predict NHPI for both datasets using the model
observed_predictions <- analysis_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
simulated_predictions <- sim_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
