library(car)
#### Read data ####
analysis_data <- read_parquet(here::here("data", "02-analysis_data", "analysis_data.parquet"))
### Model data ####
response <- "house_price"
predictors <- c("rate", "gdp", "cpi", "construction", "absorption")
# relevant columns
eda_data <- analysis_data %>%
select(all_of(c(response, predictors)))
# Create scatterplots with regression lines
for (predictor in predictors) {
# Create the plot and assign it to a variable
p <- ggplot(eda_data, aes_string(x = predictor, y = response)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = paste("Scatterplot of", response, "vs", predictor),
x = predictor, y = response) +
theme_minimal()
print(p)
}
# Correlation matrix
cor_matrix <- cor(eda_data, use = "complete.obs")
corrplot(cor_matrix, method = "circle", type = "upper", tl.col = "black", tl.srt = 45)
# linear regression model
linear_model <- lm(house_price ~ rate + gdp + cpi + construction + absorption, data = eda_data)
#### Save model ####
saveRDS(
linear_model,
file = "models/first_model.rds"
)
#### Preamble ####
# Purpose: Develop and validate a multiple linear regression model to predict house prices based on economic and housing indicators.
# Author: Gadiel David Flores Jimenez
# Date: 2024/11/25
# Contact: davidgadiel.flores@mail.utoronto.ca
# License: MIT
# Pre-requisites:
#   - The dataset `analysis_data.csv` must be available in the `data/02-analysis_data/` directory.
#   - Required libraries (`tidyverse`, `caret`, `car`) must be installed.
#   - The `here` package should be configured correctly to reference project files.
# Any other information needed:
#   - This script performs exploratory data analysis, model fitting, assumption diagnostics, and validation.
#   - Outputs include diagnostic plots, validation metrics, and a saved final model object (`final_model.rds`).
#### Workspace setup ####
library(tidyverse)
library(caret)
library(car)
### **Step 1: Data Preparation and Exploration** ###
# Read and prepare the data
analysis_data <- arrow::read_parquet(here::here("data", "02-analysis_data", "analysis_data.parquet"))
# Split data into training (80%) and testing (20%) datasets
set.seed(123)
train_index <- createDataPartition(analysis_data$house_price, p = 0.8, list = FALSE)
train_data <- analysis_data[train_index, ]
test_data <- analysis_data[-train_index, ]
# Explore correlations among predictors
correlation_matrix <- cor(train_data[, c("rate", "gdp", "cpi", "construction", "absorption")], use = "complete.obs")
cat("Correlation Matrix:\n")
print(correlation_matrix)
# Initial check for multicollinearity using VIF
initial_model <- lm(house_price ~ rate + gdp + cpi + construction + absorption, data = train_data)
initial_vif <- vif(initial_model)
cat("Initial VIF Values:\n")
print(initial_vif)
# Remove highly correlated predictors (e.g., `cpi`)
model_without_cpi <- lm(house_price ~ rate + gdp + construction + absorption, data = train_data)
vif_without_cpi <- vif(model_without_cpi)
cat("VIF Values after removing cpi:\n")
print(vif_without_cpi)
### **Step 2: Model Fitting and Diagnostics** ###
# Fit the updated model and check assumptions
cat("Summary of the model without cpi:\n")
print(summary(model_without_cpi))
# Residual diagnostics
residuals <- residuals(model_without_cpi)
fitted_values <- fitted(model_without_cpi)
# Linearity: Residuals vs. Fitted Plot
plot(fitted_values, residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20,
col = "blue")
abline(h = 0, col = "red", lty = 2)
# Homoscedasticity: Scale-Location Plot
sqrt_abs_residuals <- sqrt(abs(residuals))
plot(fitted_values, sqrt_abs_residuals,
main = "Scale-Location Plot",
xlab = "Fitted Values",
ylab = "Square Root of Absolute Residuals",
pch = 20,
col = "blue")
abline(h = mean(sqrt_abs_residuals), col = "red", lty = 2)
# Normality: Q-Q Plot
qqnorm(residuals, main = "Normal Q-Q Plot")
qqline(residuals, col = "red", lty = 2)
# Summarize residual diagnostics
cat("Summary of residuals:\n")
print(summary(residuals))
cat("\nStandard deviation of residuals:\n")
print(sd(residuals))
### **Step 3: Model Refinement and Validation** ###
# Simplify model by evaluating predictors' significance
final_model <- step(model_without_cpi, direction = "both", trace = FALSE)  # Stepwise AIC-based refinement
cat("Final Model Summary:\n")
print(summary(final_model))
# Validate model on test data
predictions <- predict(final_model, newdata = test_data)
test_residuals <- test_data$house_price - predictions
# Compute validation metrics
rmse <- sqrt(mean(test_residuals^2))
mae <- mean(abs(test_residuals))
r_squared <- 1 - (sum(test_residuals^2) / sum((test_data$house_price - mean(test_data$house_price))^2))
cat("Validation Metrics:\n")
cat("RMSE:", round(rmse, 2), "\n")
cat("MAE:", round(mae, 2), "\n")
cat("R-squared:", round(r_squared, 4), "\n")
#### Save final model ####
saveRDS(
final_model,
file = "models/final_model.rds"
)
#| include: false
#| warning: false
#| message: false
library(lubridate)
library(readr)
library(ggplot2)
library(dplyr)
library(kableExtra)
library(bayesplot)
library(tidyr)
analysis_data <- arrow::read_parquet(here::here("data", "02-analysis_data", "analysis_data.parquet"))
sim_data <- arrow::read_parquet(here::here("data", "00-simulated_data", "simulated_data.parquet"))
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods with points
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", size = 0.5) +
geom_point(color = "red", size = 1.5) +  # Add points at each data point
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index",
title = "Trends in New Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods with points
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", size = 0.5) +
geom_point(color = "lightblue", size = 1.5) +  # Add points at each data point
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index",
title = "Trends in New Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods with points
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", size = 0.5) +
geom_point(color = "black", size = 1.5) +  # Add points at each data point
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index",
title = "Trends in New Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: Trends in New Housing Price Index: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods with points
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", size = 0.5) +
geom_point(color = "black", size = 1.5) +  # Add points at each data point
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: Trends in New Housing Price Index: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods with points
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", size = 0.5) +
geom_point(color = "black", size = 1.5) +  # Add points at each data point
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Trends
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# Plot data by 6-month periods with points
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", size = 0.5) +
geom_point(color = "black", size = 1.5) +  # Add points at each data point
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Trends
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# Plot data by 6-month periods with points
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", size = 0.5) +
geom_point(color = "black", size = 1.5) +  # Add points at each data point
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index")
#| include: false
#| warning: false
#| message: false
library(lubridate)
library(readr)
library(ggplot2)
library(dplyr)
library(kableExtra)
library(bayesplot)
library(tidyr)
analysis_data <- arrow::read_parquet(here::here("data", "02-analysis_data", "analysis_data.parquet"))
sim_data <- arrow::read_parquet(here::here("data", "00-simulated_data", "simulated_data.parquet"))
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Trends
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# Plot data by 6-month periods with points
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", linewidth = 0.5) +  # Use `linewidth` instead of `size`
geom_point(color = "black", size = 1.5) +  # Add points at each data point
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Trends
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# Plot data by 6-month periods with points
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", linewidth = 0.5) +  # Use `linewidth` instead of `size`
geom_point(color = "black", size = 1.5) +  # Add points at each data point
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index")
#| label: fig-available-homes
#| fig-cap: Distribution of Available Homes by Six-Month Period
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = construction)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "Number of Available Homes",
title = "Availability of Homes Over Time (Every 6 Months)")
#| label: fig-available-homes
#| fig-cap: Availability of Homes Over Time
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = construction)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "Number of Available Homes")
#| label: fig-available-homes
#| fig-cap: Availability of Homes Over Time
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = construction)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "Number of New Built Homes")
#| label: fig-sold-homes
#| fig-cap: Distribution of sold Homes by Six-Month Period
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = absorption)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "Number of Sold Homes",
title = "Sold of Homes Over Time (Every 6 Months)")
#| label: fig-sold-homes
#| fig-cap: Distribution of sold Homes by Six-Month Period
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = absorption)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "Number of Sold Homes",
title = "Sold of Homes Over Time")
#| label: fig-gdp
#| fig-cap: Gross Domestic Product by Six-Month Period
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = gdp)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "GDP")
#| label: fig-interest-rate
#| fig-cap: Interest Rate Trends and Hikes
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = rate)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "Rate")
#| label: fig-interest-rate
#| fig-cap: Interest Rate Trends and Hikes
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = rate)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "Rate")
#| label: fig-cpi
#| fig-cap: CPI
#| echo: false
#| eval: true
#| warning: false
#| message: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = cpi)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Year",
y = "CPI")
#| label: tbl-modelresults
#| fig-cap: Results
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Data summarizing the results
results_table <- data.frame(
Factor = c("Bank Interest Rate", "GDP", "Housing Absorption"),
Effect_on_NHPI = c("-0.62 per 1% increase", "+0.0000778 per unit increase", "-0.00603 per unit increase"),
Interpretation = c(
"Higher interest rates make mortgages more expensive, reducing demand and lowering NHPI.",
"Economic growth slightly increases NHPI as higher incomes boost housing demand.",
"Higher absorption suggests competitive pricing or increased supply, leading to slight NHPI decreases."
)
)
# Model performance
r_squared <- 0.9576
# Create the table
kable(results_table, caption = "Summary of NHPI Model Results") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Display the R-squared value
cat("\n### Model Performance\n")
cat(sprintf("The R-squared value of the model is %.4f, indicating that %.2f%% of the variation in NHPI is explained by the predictors.\n",
r_squared, r_squared * 100))
#| label: tbl-modelresults
#| tbl-cap: Summary of NHPI Model Results
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Load necessary library
library(knitr)
library(kableExtra)
# Data summarizing the results
results_table <- data.frame(
Factor = c("Bank Interest Rate", "GDP", "Housing Absorption"),
Effect_on_NHPI = c("-0.62 per unit increase", "+0.0000778 per unit increase", "-0.00603 per unit increase")
)
# Model performance
r_squared <- 0.9576
# Create the table
kable(results_table, caption = "Summary of NHPI Model Results") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
