cat("MAE:", round(mae, 2), "\n")
cat("R-squared:", round(r_squared, 4), "\n")
#### Save final model ####
saveRDS(
final_model,
file = "models/final_model.rds"
)
#### Workspace setup ####
library(tidyverse)
library(caret)
library(car)
### **Step 1: Data Preparation and Exploration** ###
# Read and prepare the data
analysis_data <- read_csv(here::here("data", "02-analysis_data", "analysis_data.csv"))
# Split data into training (80%) and testing (20%) datasets
set.seed(123)
train_index <- createDataPartition(analysis_data$house_price, p = 0.8, list = FALSE)
train_data <- analysis_data[train_index, ]
test_data <- analysis_data[-train_index, ]
# Explore correlations among predictors
correlation_matrix <- cor(train_data[, c("rate", "gdp", "cpi", "construction", "absorption")], use = "complete.obs")
cat("Correlation Matrix:\n")
print(correlation_matrix)
# Initial check for multicollinearity using VIF
initial_model <- lm(house_price ~ rate + gdp + cpi + construction + absorption, data = train_data)
initial_vif <- vif(initial_model)
cat("Initial VIF Values:\n")
print(initial_vif)
# Remove highly correlated predictors (e.g., `cpi`)
model_without_cpi <- lm(house_price ~ rate + gdp + construction + absorption, data = train_data)
vif_without_cpi <- vif(model_without_cpi)
cat("VIF Values after removing cpi:\n")
print(vif_without_cpi)
### **Step 2: Model Fitting and Diagnostics** ###
# Fit the updated model and check assumptions
cat("Summary of the model without cpi:\n")
print(summary(model_without_cpi))
# Residual diagnostics
residuals <- residuals(model_without_cpi)
fitted_values <- fitted(model_without_cpi)
# Linearity: Residuals vs. Fitted Plot
plot(fitted_values, residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20,
col = "blue")
abline(h = 0, col = "red", lty = 2)
# Homoscedasticity: Scale-Location Plot
sqrt_abs_residuals <- sqrt(abs(residuals))
plot(fitted_values, sqrt_abs_residuals,
main = "Scale-Location Plot",
xlab = "Fitted Values",
ylab = "Square Root of Absolute Residuals",
pch = 20,
col = "blue")
abline(h = mean(sqrt_abs_residuals), col = "red", lty = 2)
# Normality: Q-Q Plot
qqnorm(residuals, main = "Normal Q-Q Plot")
qqline(residuals, col = "red", lty = 2)
# Summarize residual diagnostics
cat("Summary of residuals:\n")
print(summary(residuals))
cat("\nStandard deviation of residuals:\n")
print(sd(residuals))
### **Step 3: Model Refinement and Validation** ###
# Simplify model by evaluating predictors' significance
final_model <- step(model_without_cpi, direction = "both", trace = FALSE)  # Stepwise AIC-based refinement
cat("Final Model Summary:\n")
print(summary(final_model))
# Validate model on test data
predictions <- predict(final_model, newdata = test_data)
test_residuals <- test_data$house_price - predictions
# Compute validation metrics
rmse <- sqrt(mean(test_residuals^2))
mae <- mean(abs(test_residuals))
r_squared <- 1 - (sum(test_residuals^2) / sum((test_data$house_price - mean(test_data$house_price))^2))
cat("Validation Metrics:\n")
cat("RMSE:", round(rmse, 2), "\n")
cat("MAE:", round(mae, 2), "\n")
cat("R-squared:", round(r_squared, 4), "\n")
#### Save final model ####
saveRDS(
final_model,
file = "models/final_model.rds"
)
_____________________________________________________
#### Workspace setup ####
library(tidyverse)
library(caret)
library(car)
### **Step 1: Data Preparation and Exploration** ###
# Read and prepare the data
analysis_data <- read_csv(here::here("data", "02-analysis_data", "analysis_data.csv"))
# Split data into training (80%) and testing (20%) datasets
set.seed(123)
train_index <- createDataPartition(analysis_data$house_price, p = 0.8, list = FALSE)
train_data <- analysis_data[train_index, ]
test_data <- analysis_data[-train_index, ]
# Explore correlations among predictors
correlation_matrix <- cor(train_data[, c("rate", "gdp", "cpi", "construction", "absorption")], use = "complete.obs")
cat("Correlation Matrix:\n")
print(correlation_matrix)
# Initial check for multicollinearity using VIF
initial_model <- lm(house_price ~ rate + gdp + cpi + construction + absorption, data = train_data)
initial_vif <- vif(initial_model)
cat("Initial VIF Values:\n")
print(initial_vif)
# Remove highly correlated predictors (e.g., `cpi`)
model_without_cpi <- lm(house_price ~ rate + gdp + construction + absorption, data = train_data)
vif_without_cpi <- vif(model_without_cpi)
cat("VIF Values after removing cpi:\n")
print(vif_without_cpi)
### **Step 2: Model Fitting and Diagnostics** ###
# Fit the updated model and check assumptions
cat("Summary of the model without cpi:\n")
print(summary(model_without_cpi))
# Residual diagnostics
residuals <- residuals(model_without_cpi)
fitted_values <- fitted(model_without_cpi)
# Linearity: Residuals vs. Fitted Plot
plot(fitted_values, residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20,
col = "blue")
abline(h = 0, col = "red", lty = 2)
# Homoscedasticity: Scale-Location Plot
sqrt_abs_residuals <- sqrt(abs(residuals))
plot(fitted_values, sqrt_abs_residuals,
main = "Scale-Location Plot",
xlab = "Fitted Values",
ylab = "Square Root of Absolute Residuals",
pch = 20,
col = "blue")
abline(h = mean(sqrt_abs_residuals), col = "red", lty = 2)
# Normality: Q-Q Plot
qqnorm(residuals, main = "Normal Q-Q Plot")
qqline(residuals, col = "red", lty = 2)
# Summarize residual diagnostics
cat("Summary of residuals:\n")
print(summary(residuals))
cat("\nStandard deviation of residuals:\n")
print(sd(residuals))
### **Step 3: Model Refinement and Validation** ###
# Simplify model by evaluating predictors' significance
final_model <- step(model_without_cpi, direction = "both", trace = FALSE)  # Stepwise AIC-based refinement
cat("Final Model Summary:\n")
print(summary(final_model))
# Validate model on test data
predictions <- predict(final_model, newdata = test_data)
test_residuals <- test_data$house_price - predictions
# Compute validation metrics
rmse <- sqrt(mean(test_residuals^2))
mae <- mean(abs(test_residuals))
r_squared <- 1 - (sum(test_residuals^2) / sum((test_data$house_price - mean(test_data$house_price))^2))
cat("Validation Metrics:\n")
cat("RMSE:", round(rmse, 2), "\n")
cat("MAE:", round(mae, 2), "\n")
cat("R-squared:", round(r_squared, 4), "\n")
#### Save final model ####
saveRDS(
final_model,
file = "models/final_model.rds"
)
summary(final_model)
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
analysis_data |>
ggplot(aes(x = quarter, y = housing_price_index)) +
geom_line(color = "blue", size = 1) +
theme_minimal() +
labs(x = "Quarter",
y = "Housing Price Index",
title = "Trends in New Housing Price Index (1997–2016)")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
analysis_data |>
ggplot(aes(x = REF_DATE, y = housing_price)) +
geom_line(color = "blue", size = 1) +
theme_minimal() +
labs(x = "Quarter",
y = "Housing Price Index",
title = "Trends in New Housing Price Index (1997–2016)")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
analysis_data |>
ggplot(aes(x = REF_DATE, y = house_price)) +
geom_line(color = "blue", size = 1) +
theme_minimal() +
labs(x = "Quarter",
y = "Housing Price Index",
title = "Trends in New Housing Price Index (1997–2016)")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
analysis_data |>
ggplot(aes(x = REF_DATE, y = house_price)) +
geom_line(color = "blue", size = 0.5) +
theme_minimal() +
labs(x = "Quarter",
y = "Housing Price Index",
title = "Trends in New Housing Price Index (1997–2016)")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
library(lubridate)
library(readr)
library(ggplot2)
library(dplyr)
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
# Extract year from REF_DATE
analysis_data <- analysis_data |>
mutate(Year = year(REF_DATE))
head(analysis_data$REF_DATE)
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(palmerpenguins)
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
library(lubridate)
library(readr)
library(ggplot2)
library(dplyr)
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Summarize housing prices by year (e.g., mean per year if multiple quarters exist)
annual_data <- analysis_data |>
group_by(Year) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
library(lubridate)
library(readr)
library(ggplot2)
library(dplyr)
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract Year
analysis_data <- analysis_data |>
mutate(Year = year(REF_DATE))
# Summarize housing prices by year
annual_data <- analysis_data |>
group_by(Year) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(annual_data)
# Plot data by year
annual_data |>
ggplot(aes(x = Year, y = mean_house_price)) +
geom_line(color = "blue", size = 0.5) +
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index",
title = "Trends in New Housing Price Index (1997–2016)")
#| include: false
#| warning: false
#| message: false
library(lubridate)
library(readr)
library(ggplot2)
library(dplyr)
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "blue", size = 0.5) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "Housing Price Index",
title = "Trends in New Housing Price Index (Every 6 Months)")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "blue", size = 0.5) +
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index",
title = "Trends in New Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "yellow", size = 0.5) +
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index",
title = "Trends in New Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "green", size = 0.5) +
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index",
title = "Trends in New Housing Price Index")
#| label: fig-new-housing-price
#| fig-cap: New Housing Price Index Over Time
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Extract 6-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Summarize housing prices by 6-month periods
semiannual_data <- analysis_data |>
group_by(SixMonthPeriod) |>
summarize(mean_house_price = mean(house_price, na.rm = TRUE))
# View the summarized data
head(semiannual_data)
# Plot data by 6-month periods
semiannual_data |>
ggplot(aes(x = SixMonthPeriod, y = mean_house_price)) +
geom_line(color = "darkgreen", size = 0.5) +
theme_minimal() +
labs(x = "Year",
y = "Housing Price Index",
title = "Trends in New Housing Price Index")
#| label: fig-available-homes
#| fig-cap: Distribution of Available Homes by Quarter
#| echo: false
analysis_data |>
ggplot(aes(x = REF_DATE, y = construction)) +
geom_col(fill = "steelblue", alpha = 0.8) +
theme_minimal() +
labs(x = "Quarter",
y = "Number of Available Homes",
title = "Availability of Homes Over Time")
#| label: fig-available-homes
#| fig-cap: Distribution of Available Homes by Six-Month Period
#| echo: false
library(lubridate)
library(dplyr)
library(ggplot2)
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Aggregate REF_DATE to six-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Plot data by six-month periods
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = construction)) +
geom_col(fill = "steelblue", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "Number of Available Homes",
title = "Availability of Homes Over Time (Every 6 Months)")
#| label: fig-available-homes
#| fig-cap: Distribution of Available Homes by Six-Month Period
#| echo: false
library(lubridate)
library(dplyr)
library(ggplot2)
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Aggregate REF_DATE to six-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Plot data by six-month periods
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = construction)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "Number of Available Homes",
title = "Availability of Homes Over Time (Every 6 Months)")
#| label: fig-sold-homes
#| fig-cap: Distribution of sold Homes by Six-Month Period
#| echo: false
library(lubridate)
library(dplyr)
library(ggplot2)
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Aggregate REF_DATE to six-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Plot data by six-month periods
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = absorption)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "Number of Available Homes",
title = "Availability of Homes Over Time (Every 6 Months)")
#| label: fig-gdp
#| fig-cap: Gross Domestic Product
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Aggregate REF_DATE to six-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Plot data by six-month periods
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = gdp)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "gdp",
title = "GDP")
#| label: fig-interest-rate
#| fig-cap: Interest Rate Trends and Hikes
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Aggregate REF_DATE to six-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Plot data by six-month periods
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = rate)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "rate",
title = "Bank Interest Rates ")
#| label: fig-interest-rate
#| fig-cap: Interest Rate Trends and Hikes
#| echo: false
# Convert REF_DATE to a valid date format
analysis_data <- analysis_data |>
mutate(REF_DATE = as.Date(paste0(REF_DATE, "-01"), format = "%Y-%m-%d"))
# Aggregate REF_DATE to six-month periods
analysis_data <- analysis_data |>
mutate(SixMonthPeriod = floor_date(REF_DATE, "6 months"))
# Plot data by six-month periods
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = cpi)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "cpi",
title = "CPI")
