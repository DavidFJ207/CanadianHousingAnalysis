theme_minimal() +
labs(x = "Six-Month Period",
y = "cpi",
title = "CPI")
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Data summarizing the results
results_table <- data.frame(
Factor = c("Bank Interest Rate", "GDP", "Housing Absorption"),
Effect_on_NHPI = c("-0.62 per 1% increase", "+0.0000778 per unit increase", "-0.00603 per unit increase"),
Interpretation = c(
"Higher interest rates make mortgages more expensive, reducing demand and lowering NHPI.",
"Economic growth slightly increases NHPI as higher incomes boost housing demand.",
"Higher absorption suggests competitive pricing or increased supply, leading to slight NHPI decreases."
)
)
# Model performance
r_squared <- 0.9576
# Create the table
kable(results_table, caption = "Summary of NHPI Model Results") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Display the R-squared value
cat("\n### Model Performance\n")
cat(sprintf("The R-squared value of the model is %.4f, indicating that %.2f%% of the variation in NHPI is explained by the predictors.\n",
r_squared, r_squared * 100))
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior
#| layout-ncol: 2
#| fig-cap: "Examining how the model fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]
pp_check(first_model) +
theme_classic() +
theme(legend.position = "bottom")
#| label: fig-available-homes
#| fig-cap: Distribution of Available Homes by Six-Month Period
#| echo: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = construction)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "Number of Available Homes",
title = "Availability of Homes Over Time (Every 6 Months)")
#| label: fig-sold-homes
#| fig-cap: Distribution of sold Homes by Six-Month Period
#| echo: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = absorption)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "Number of Sold Homes",
title = "Sold of Homes Over Time (Every 6 Months)")
#| label: fig-interest-rate
#| fig-cap: Interest Rate Trends and Hikes
#| echo: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = rate)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "rate",
title = "Bank Interest Rates ")
#| label: fig-interest-rate
#| fig-cap: Interest Rate Trends and Hikes
#| echo: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = cpi)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "cpi",
title = "CPI")
#| label: fig-cpi
#| fig-cap: CPI
#| echo: false
analysis_data |>
ggplot(aes(x = SixMonthPeriod, y = cpi)) +
geom_col(fill = "darkgreen", alpha = 0.8) +
theme_minimal() +
labs(x = "Six-Month Period",
y = "cpi",
title = "CPI")
#### Workspace setup ####
library(tidyverse)
set.seed(853)
#### Simulate data ####
n <- 1000
# Simulate predictor variables
constructed_homes <- rnorm(n, mean = 200, sd = 50)
absorption <- rnorm(n, mean = 180, sd = 40)
gdp <- rnorm(n, mean = 2.5, sd = 0.5)
cpi <- rnorm(n, mean = 120, sd = 10)
bank_interest_rates <- rnorm(n, mean = 3, sd = 0.75)
# Generate NHPI as a function of predictors + random noise
NHPI <- 100 +
0.3 * constructed_homes +
0.4 * absorption +
1.5 * gdp -
0.8 * bank_interest_rates +
rnorm(n, mean = 0, sd = 10)  # Adding some random noise
# Combine into a dataframe
analysis_data <- tibble(
NHPI,
constructed_homes,
absorption,
gdp,
cpi,
bank_interest_rates
)
#### Save data ####
write_csv(analysis_data, "data/00-simulated_data/simulated_data.csv")
View(analysis_data)
# Check the structure of the simulated data
glimpse(analysis_data)
# Summary statistics
summary(analysis_data)
# Quick visualization of relationships
analysis_data %>%
pivot_longer(-NHPI, names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value, y = NHPI, color = Variable)) +
geom_point(alpha = 0.5) +
facet_wrap(~Variable, scales = "free_x") +
theme_minimal() +
labs(title = "Simulated NHPI vs Predictor Variables",
x = "Predictor Value",
y = "NHPI")
#### Workspace setup ####
library(tidyverse)
library(caret)
library(car)
### **Step 1: Data Preparation and Exploration** ###
# Read and prepare the data
analysis_data <- read_csv(here::here("data", "02-analysis_data", "analysis_data.csv"))
# Split data into training (80%) and testing (20%) datasets
set.seed(123)
train_index <- createDataPartition(analysis_data$house_price, p = 0.8, list = FALSE)
train_data <- analysis_data[train_index, ]
test_data <- analysis_data[-train_index, ]
# Explore correlations among predictors
correlation_matrix <- cor(train_data[, c("rate", "gdp", "cpi", "construction", "absorption")], use = "complete.obs")
cat("Correlation Matrix:\n")
print(correlation_matrix)
# Initial check for multicollinearity using VIF
initial_model <- lm(house_price ~ rate + gdp + cpi + construction + absorption, data = train_data)
initial_vif <- vif(initial_model)
cat("Initial VIF Values:\n")
print(initial_vif)
# Remove highly correlated predictors (e.g., `cpi`)
model_without_cpi <- lm(house_price ~ rate + gdp + construction + absorption, data = train_data)
vif_without_cpi <- vif(model_without_cpi)
cat("VIF Values after removing cpi:\n")
print(vif_without_cpi)
### **Step 2: Model Fitting and Diagnostics** ###
# Fit the updated model and check assumptions
cat("Summary of the model without cpi:\n")
print(summary(model_without_cpi))
# Residual diagnostics
residuals <- residuals(model_without_cpi)
fitted_values <- fitted(model_without_cpi)
# Linearity: Residuals vs. Fitted Plot
plot(fitted_values, residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20,
col = "blue")
abline(h = 0, col = "red", lty = 2)
# Homoscedasticity: Scale-Location Plot
sqrt_abs_residuals <- sqrt(abs(residuals))
plot(fitted_values, sqrt_abs_residuals,
main = "Scale-Location Plot",
xlab = "Fitted Values",
ylab = "Square Root of Absolute Residuals",
pch = 20,
col = "blue")
abline(h = mean(sqrt_abs_residuals), col = "red", lty = 2)
# Normality: Q-Q Plot
qqnorm(residuals, main = "Normal Q-Q Plot")
qqline(residuals, col = "red", lty = 2)
# Summarize residual diagnostics
cat("Summary of residuals:\n")
print(summary(residuals))
cat("\nStandard deviation of residuals:\n")
print(sd(residuals))
### **Step 3: Model Refinement and Validation** ###
# Simplify model by evaluating predictors' significance
final_model <- step(model_without_cpi, direction = "both", trace = FALSE)  # Stepwise AIC-based refinement
cat("Final Model Summary:\n")
print(summary(final_model))
# Validate model on test data
predictions <- predict(final_model, newdata = test_data)
test_residuals <- test_data$house_price - predictions
# Compute validation metrics
rmse <- sqrt(mean(test_residuals^2))
mae <- mean(abs(test_residuals))
r_squared <- 1 - (sum(test_residuals^2) / sum((test_data$house_price - mean(test_data$house_price))^2))
cat("Validation Metrics:\n")
cat("RMSE:", round(rmse, 2), "\n")
cat("MAE:", round(mae, 2), "\n")
cat("R-squared:", round(r_squared, 4), "\n")
#### Save final model ####
saveRDS(
final_model,
file = "models/final_model.rds"
)
# Load the observed and simulated datasets
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
sim_data <- read_csv(here::here("data/00-simulated_data/simulated_data.csv"))
# Load the model
final_model <- readRDS(here::here("models/final_model.rds"))
#### Compare the datasets ####
# Check the structure of both datasets
glimpse(analysis_data)
glimpse(sim_data)
# Summary statistics comparison
summary_stats <- list(
observed = analysis_data %>% summary(),
simulated = sim_data %>% summary()
)
# Visualization: NHPI vs Predictor Variables for both datasets
# Prepare observed data
observed_long <- analysis_data %>%
pivot_longer(-NHPI, names_to = "Variable", values_to = "Value") %>%
mutate(Dataset = "Observed")
View(analysis_data)
#### Preamble ####
# Purpose: Simulates a dataset of housing market predictors and their impact on
# the New Housing Price Index (NHPI).
# Author: Gadiel David Flores Jimenez
# Date: 26-11-2024
# Contact: davidgadiel.flores@mail.utoronto.ca
# License: MIT
# Pre-requisites: The `tidyverse` package must be installed
# Any other information needed? Make sure you are in the `starter_folder` rproj
# and the directory "data/00-simulated_data" exists to save the output file.
#### Workspace setup ####
library(tidyverse)
set.seed(853)
#### Simulate data ####
n <- 1000
# Simulate predictor variables
constructed_homes <- rnorm(n, mean = 200, sd = 50)
absorption <- rnorm(n, mean = 180, sd = 40)
gdp <- rnorm(n, mean = 2.5, sd = 0.5)
cpi <- rnorm(n, mean = 120, sd = 10)
bank_interest_rates <- rnorm(n, mean = 3, sd = 0.75)
# Generate NHPI as a function of predictors + random noise
NHPI <- 100 +
0.3 * constructed_homes +
0.4 * absorption +
1.5 * gdp -
0.8 * bank_interest_rates +
rnorm(n, mean = 0, sd = 10)  # Adding some random noise
# Combine into a dataframe
analysis_data <- tibble(
house_price,
construction,
absorption,
gdp,
cpi,
rate
)
#### Preamble ####
# Purpose: Simulates a dataset of housing market predictors and their impact on
# the New Housing Price Index (NHPI).
# Author: Gadiel David Flores Jimenez
# Date: 26-11-2024
# Contact: davidgadiel.flores@mail.utoronto.ca
# License: MIT
# Pre-requisites: The `tidyverse` package must be installed
# Any other information needed? Make sure you are in the `starter_folder` rproj
# and the directory "data/00-simulated_data" exists to save the output file.
#### Workspace setup ####
library(tidyverse)
set.seed(853)
#### Simulate data ####
n <- 1000
# Simulate predictor variables
construction <- rnorm(n, mean = 200, sd = 50)
absorption <- rnorm(n, mean = 180, sd = 40)
gdp <- rnorm(n, mean = 2.5, sd = 0.5)
cpi <- rnorm(n, mean = 120, sd = 10)
rate <- rnorm(n, mean = 3, sd = 0.75)
# Generate NHPI as a function of predictors + random noise
house_price <- 100 +
0.3 * constructed_homes +
0.4 * absorption +
1.5 * gdp -
0.8 * rate +
rnorm(n, mean = 0, sd = 10)  # Adding some random noise
# Combine into a dataframe
analysis_data <- tibble(
house_price,
construction,
absorption,
gdp,
cpi,
rate
)
#### Save data ####
write_csv(analysis_data, "data/00-simulated_data/simulated_data.csv")
# Load the observed and simulated datasets
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
sim_data <- read_csv(here::here("data/00-simulated_data/simulated_data.csv"))
# Load the model
final_model <- readRDS(here::here("models/final_model.rds"))
#### Compare the datasets ####
# Check the structure of both datasets
glimpse(analysis_data)
glimpse(sim_data)
# Summary statistics comparison
summary_stats <- list(
observed = analysis_data %>% summary(),
simulated = sim_data %>% summary()
)
# Visualization: NHPI vs Predictor Variables for both datasets
# Prepare observed data
observed_long <- analysis_data %>%
pivot_longer(-NHPI, names_to = "Variable", values_to = "Value") %>%
mutate(Dataset = "Observed")
colnames(analysis_data)
View(sim_data)
# Load the observed and simulated datasets
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
sim_data <- read_csv(here::here("data/00-simulated_data/simulated_data.csv"))
# Load the model
final_model <- readRDS(here::here("models/final_model.rds"))
#### Compare the datasets ####
# Check the structure of both datasets
glimpse(analysis_data)
glimpse(sim_data)
# Summary statistics comparison
summary_stats <- list(
observed = analysis_data %>% summary(),
simulated = sim_data %>% summary()
)
# Visualization: NHPI vs Predictor Variables for both datasets
# Prepare observed data
observed_long <- analysis_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Observed")
# Prepare simulated data
simulated_long <- sim_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Simulated")
# Combine datasets
combined_data <- bind_rows(observed_long, simulated_long)
# Plot comparison
combined_data %>%
ggplot(aes(x = Value, y = house_price, color = Dataset)) +
geom_point(alpha = 0.5) +
facet_wrap(~Variable, scales = "free_x") +
theme_minimal() +
labs(title = "Comparison of Observed vs Simulated NHPI",
x = "Predictor Value",
y = "House Price",
color = "Dataset")
#### Model-based comparison ####
# Predict NHPI for both datasets using the model
observed_predictions <- analysis_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
simulated_predictions <- sim_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
# Visualize observed vs predicted NHPI
observed_predictions %>%
ggplot(aes(x = house_price, y = Predicted_House_Price)) +
geom_point(alpha = 0.5, color = "blue") +
theme_minimal() +
labs(title = "Observed Data: House Price vs Predicted House Price",
x = "Actual House Price",
y = "Predicted House Price")
# Visualize simulated vs predicted NHPI
simulated_predictions %>%
ggplot(aes(x = house_price, y = Predicted_House_Price)) +
geom_point(alpha = 0.5, color = "red") +
theme_minimal() +
labs(title = "Simulated Data: House Price vs Predicted House Price",
x = "Actual House Price",
y = "Predicted House Price")
#### Results and Implications ####
# Calculate differences in summary statistics
summary_diff <- summary_stats$observed - summary_stats$simulated
# Load the observed and simulated datasets
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
sim_data <- read_csv(here::here("data/00-simulated_data/simulated_data.csv"))
# Load the model
final_model <- readRDS(here::here("models/final_model.rds"))
#### Compare the datasets ####
# Check the structure of both datasets
glimpse(analysis_data)
glimpse(sim_data)
# Summary statistics comparison
summary_stats <- list(
observed = analysis_data %>% summary(),
simulated = sim_data %>% summary()
)
# Visualization: NHPI vs Predictor Variables for both datasets
# Prepare observed data
observed_long <- analysis_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Observed")
# Load the observed and simulated datasets
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
sim_data <- read_csv(here::here("data/00-simulated_data/simulated_data.csv"))
# Load the model
final_model <- readRDS(here::here("models/final_model.rds"))
#### Compare the datasets ####
# Check the structure of both datasets
glimpse(analysis_data)
glimpse(sim_data)
# Summary statistics comparison
summary_stats <- list(
observed = analysis_data %>% summary(),
simulated = sim_data %>% summary()
)
# Visualization: NHPI vs Predictor Variables for both datasets
# Prepare observed data
observed_long <- analysis_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Observed")
# Prepare simulated data
simulated_long <- sim_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Simulated")
# Combine datasets
combined_data <- bind_rows(observed_long, simulated_long)
# Plot comparison
combined_data %>%
ggplot(aes(x = Value, y = house_price, color = Dataset)) +
geom_point(alpha = 0.5) +
facet_wrap(~Variable, scales = "free_x") +
theme_minimal() +
labs(title = "Comparison of Observed vs Simulated NHPI",
x = "Predictor Value",
y = "House Price",
color = "Dataset")
#### Model-based comparison ####
# Predict NHPI for both datasets using the model
observed_predictions <- analysis_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
simulated_predictions <- sim_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
# Visualize observed vs predicted NHPI
observed_predictions %>%
ggplot(aes(x = house_price, y = Predicted_House_Price)) +
geom_point(alpha = 0.5, color = "blue") +
theme_minimal() +
labs(title = "Observed Data: House Price vs Predicted House Price",
x = "Actual House Price",
y = "Predicted House Price")
# Load the observed and simulated datasets
analysis_data <- read_csv(here::here("data/02-analysis_data/analysis_data.csv"))
sim_data <- read_csv(here::here("data/00-simulated_data/simulated_data.csv"))
# Load the model
final_model <- readRDS(here::here("models/final_model.rds"))
#### Compare the datasets ####
# Check the structure of both datasets
glimpse(analysis_data)
glimpse(sim_data)
# Summary statistics comparison
summary_stats <- list(
observed = analysis_data %>% summary(),
simulated = sim_data %>% summary()
)
# Visualization: NHPI vs Predictor Variables for both datasets
# Prepare observed data
observed_long <- analysis_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Observed")
# Prepare simulated data
simulated_long <- sim_data %>%
pivot_longer(cols = c("rate", "gdp", "cpi", "construction", "absorption"),
names_to = "Variable",
values_to = "Value") %>%
mutate(Dataset = "Simulated")
# Combine datasets
combined_data <- bind_rows(observed_long, simulated_long)
# Plot comparison
combined_data %>%
ggplot(aes(x = Value, y = house_price, color = Dataset)) +
geom_point(alpha = 0.5) +
facet_wrap(~Variable, scales = "free_x") +
theme_minimal() +
labs(title = "Comparison of Observed vs Simulated NHPI",
x = "Predictor Value",
y = "House Price",
color = "Dataset")
#### Model-based comparison ####
# Predict NHPI for both datasets using the model
observed_predictions <- analysis_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
simulated_predictions <- sim_data %>%
mutate(Predicted_House_Price = predict(final_model, newdata = .))
git add .
